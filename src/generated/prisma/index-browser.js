
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  firstSeenAt: 'firstSeenAt',
  lastSeenAt: 'lastSeenAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  winnerId: 'winnerId',
  turn: 'turn'
};

exports.Prisma.Match_moveScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  moveNumber: 'moveNumber',
  fromX: 'fromX',
  fromY: 'fromY',
  toX: 'toX',
  toY: 'toY',
  pieceType: 'pieceType',
  capturedPieceType: 'capturedPieceType',
  specialAbilityUsed: 'specialAbilityUsed',
  createdAt: 'createdAt'
};

exports.Prisma.Match_pieceScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  type: 'type',
  posX: 'posX',
  posY: 'posY',
  usedAbility: 'usedAbility',
  captured: 'captured',
  status: 'status'
};

exports.Prisma.Match_playerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  matchId: 'matchId',
  color: 'color',
  dreamEnergy: 'dreamEnergy'
};

exports.Prisma.Refresh_tokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  token: 'token',
  ipAddress: 'ipAddress',
  country: 'country',
  region: 'region',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Match_queueScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  joinedAt: 'joinedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.deviceOrderByRelevanceFieldEnum = {
  userAgent: 'userAgent'
};

exports.Prisma.match_moveOrderByRelevanceFieldEnum = {
  pieceType: 'pieceType',
  capturedPieceType: 'capturedPieceType'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.refresh_tokenOrderByRelevanceFieldEnum = {
  token: 'token',
  ipAddress: 'ipAddress',
  country: 'country',
  region: 'region'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash'
};
exports.device_deviceType = exports.$Enums.device_deviceType = {
  desktop: 'desktop',
  mobile: 'mobile',
  tablet: 'tablet',
  bot: 'bot',
  unknown: 'unknown'
};

exports.match_status = exports.$Enums.match_status = {
  ONGOING: 'ONGOING',
  FINISHED: 'FINISHED'
};

exports.match_piece_type = exports.$Enums.match_piece_type = {
  SLEEPLESS_EYE: 'SLEEPLESS_EYE',
  PHANTOM_MATRIARCH: 'PHANTOM_MATRIARCH',
  SHADOW_HUNTER: 'SHADOW_HUNTER',
  DOPPELGANGER: 'DOPPELGANGER',
  PHOBIC_LEAPER: 'PHOBIC_LEAPER',
  PSYCHIC_LARVA: 'PSYCHIC_LARVA'
};

exports.match_player_color = exports.$Enums.match_player_color = {
  WHITE: 'WHITE',
  BLACK: 'BLACK'
};

exports.match_queue_status = exports.$Enums.match_queue_status = {
  WAITING: 'WAITING',
  MATCHED: 'MATCHED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  device: 'device',
  match: 'match',
  match_move: 'match_move',
  match_piece: 'match_piece',
  match_player: 'match_player',
  refresh_token: 'refresh_token',
  user: 'user',
  match_queue: 'match_queue'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
